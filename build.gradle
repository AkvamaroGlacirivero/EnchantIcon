plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

interface EnchantIconExtension {
    // Which platform (i.e. Fabric/Forge/Quilt) is this implementation is on?
    // In case of no modding platform, use 'Vanilla'.
    Property<String> getPlatform();
    // Which Minecraft version is this implementation based on?
    Property<String> getMinecraftVersion();
}

subprojects { Project p ->
    apply plugin: 'java'

    p.extensions.create('enchantIcon', EnchantIconExtension)

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    p.archivesBaseName = "EnchantIcon"
    p.version = "1.0.4"
    if (System.getenv().CI && System.getenv().GITHUB_RUN_NUMBER) {
        p.version += "-${System.getenv().GITHUB_RUN_NUMBER}"
    } else {
        p.version += "-private"
    }

    p.repositories {
        // Enable maven central for all subprojects
        mavenCentral()
        // Enable NeoForge maven for all subprojects, for access to Mixin
        maven {
            name = 'NeoForged Maven'
            url = 'https://maven.neoforged.net/releases/'
            content {
                includeGroup 'org.spongepowered'
            }
        }
    }

    p.tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
    }

    p.processResources {
        // Exclude .cache directory which is generated by DataGen
        // Although currently we don't use DataGen
        exclude '.cache'
    }

    p.afterEvaluate { Project pAfter ->

        if (pAfter.name != 'shared-assets') {
            pAfter.processResources {
                from project(":shared-assets").sourceSets.main.resources
            }
            if (!pAfter.name.endsWith('base')) {
                String baseProject = ':' + pAfter.name.substring(0, pAfter.name.indexOf('-')) + '-base'
                pAfter.compileJava {
                    source(pAfter.project(baseProject).sourceSets.main.allSource)
                }
                pAfter.sourcesJar {
                    from project(baseProject).sourceSets.main.allJava
                }
                pAfter.processResources {
                    from project(baseProject).sourceSets.main.resources
                }
            }
        }

        if (pAfter.extensions.findByName('loom')) {
            pAfter.loom {
                mixin {
                    useLegacyMixinAp = true
                    defaultRefmapName = 'enchant_icon.refmap.json'
                }
            }
        }

        def projectExt = pAfter.extensions.enchantIcon as EnchantIconExtension
        pAfter.archivesBaseName += "-${projectExt.platform.get()}-${projectExt.minecraftVersion.get()}"

        pAfter.jar {
            manifest.attributes([
                    "Specification-Title": "Enchant-Icon",
                    "Specification-Vendor": "YuriCat",
                    "Specification-Version": "1", // We are version 1 of ourselves
                    "Implementation-Title": "${pAfter.archivesBaseName}",
                    "Implementation-Version": "${pAfter.version}",
                    "Implementation-Vendor": "Akvamaro Glacirivero"
            ])
        }
    }

}
